#!/usr/bin/env bash

set -ex

csv_file="$1"
annotation_file="$2"
PRODUCT_VERSION="1.0.0"
X_VERSION="1"
Y_VERSION="0"
Z_VERSION="0"
CSV_REPLACES_VERSION="0.4.1"

# Add openshift specific annotations to CSV file
# https://docs.openshift.com/container-platform/4.14/operators/operator_sdk/osdk-generating-csvs.html#osdk-csv-annotations-infra_osdk-generating-csvs
yq -i '.metadata.annotations += {"features.operators.openshift.io/disconnected": "true"}' "$csv_file"
yq -i '.metadata.annotations += {"features.operators.openshift.io/fips-compliant": "false"}' "$csv_file"
yq -i '.metadata.annotations += {"features.operators.openshift.io/proxy-aware": "false"}' "$csv_file"
yq -i '.metadata.annotations += {"features.operators.openshift.io/tls-profiles": "false"}' "$csv_file"
yq -i '.metadata.annotations += {"features.operators.openshift.io/token-auth-aws": "false"}' "$csv_file"
yq -i '.metadata.annotations += {"features.operators.openshift.io/token-auth-azure": "false"}' "$csv_file"
yq -i '.metadata.annotations += {"features.operators.openshift.io/token-auth-gcp": "false"}' "$csv_file"
yq -i '.metadata.annotations += {"features.operators.openshift.io/cnf": "false"}' "$csv_file"
yq -i '.metadata.annotations += {"features.operators.openshift.io/cni": "false"}' "$csv_file"
yq -i '.metadata.annotations += {"features.operators.openshift.io/csi": "false"}' "$csv_file"
yq -i '.metadata.annotations += {"support": "Cluster Observability (https://issues.redhat.com/projects/COO/)"}' "$csv_file"
yq -i '.metadata.annotations += {"operators.openshift.io/valid-subscription": "[\"OpenShift Kubernetes Engine\", \"OpenShift Container Platform\", \"OpenShift Platform Plus\"]"}' "$csv_file"
yq -i '.metadata.labels += {"operatorframework.io/arch.amd64": "supported"}' "$csv_file"
yq -i '.metadata.labels += {"operatorframework.io/arch.arm64": "supported"}' "$csv_file"
yq -i '.metadata.labels += {"operatorframework.io/arch.ppc64le": "supported"}' "$csv_file"
yq -i '.metadata.labels += {"operatorframework.io/arch.s390x": "supported"}' "$csv_file"

COO_IMAGE_URL="quay.io/redhat-user-workloads/cluster-observabilit-tenant/cluster-observability-operator-container@sha256:57614b8fb18626f0c046f98cad2f5231cde7c0f8bf9b62f88c670dab15312012"

COO_CONF_RELOADER_IMAGE_URL="quay.io/redhat-user-workloads/cluster-observabilit-tenant/obo-prometheus-operator-prometheus-config-reloader@sha256:2077f068104c81683cd34938031427c6fe77118e795d0357c18226935be74562"

COO_ALERTMANAGER_IMAGE_URL="quay.io/redhat-user-workloads/cluster-observabilit-tenant/alertmanager@sha256:99429fb7e8dbc79e4b231c7137cf17ebd8f7ad81ee93f7d3e3f3f749879ef8bf"

COO_PROMETHEUS_IMAGE_URL="quay.io/redhat-user-workloads/cluster-observabilit-tenant/cluster-observability-operator-1-0/prometheus@sha256:b114645fef3c543341e466100197d5c9033a04ec171f3efe430803d25de1b98d"

COO_THANOS_IMAGE_URL="quay.io/redhat-user-workloads/cluster-observabilit-tenant/cluster-observability-operator-1-0/thanos@sha256:82a0bd2e2354d319c35d598e0c07a8d3afd86e2dd59f88775e66628a604df437"

COO_ADMISSION_WEBHOOK_IMAGE_URL="quay.io/redhat-user-workloads/cluster-observabilit-tenant/obo-prometheus-operator-admission-webhook@sha256:b5ec1b10feb230a0a02445516b3ca32bcb0a80ef99e371990850f051a6d2ac96"

COO_PO_IMAGE_URL="quay.io/redhat-user-workloads/cluster-observabilit-tenant/obo-prometheus-operator@sha256:0ab72c806387f69e81402e0cff4239e273b6fdecedb70ae83b547665168dcb0a"

COO_CONSOLE_DASHBOARDS_PLUGIN_IMAGE_URL="quay.io/redhat-user-workloads/cluster-observabilit-tenant/cluster-observability-operator-1-0/dashboards-console-plugin-0-3@sha256:9c698f3fb5669d0a181cbd1da3f6851c0dc4d98f2c7b4d3bacd0671f967e8986"

COO_CONSOLE_DISTRIBUTED_TRACING_PLUGIN_IMAGE_URL="quay.io/redhat-user-workloads/cluster-observabilit-tenant/cluster-observability-operator-1-0/distributed-tracing-console-plugin-0-3@sha256:90a2460c1ed95799e4e973256116707740123a6d448af586bdfda76da046fe02 "

COO_CONSOLE_LOGGING_PLUGIN_IMAGE_URL="quay.io/redhat-user-workloads/cluster-observabilit-tenant/cluster-observability-operator-1-0/logging-console-plugin-6-0@sha256:473eeb6a4f03377c5ad86ba95361927a5175b55f6a6d19c7eff4a2019d27d3b7"

COO_CONSOLE_TROUBLESHOOTING_PANEL_PLUGIN_IMAGE_URL="quay.io/redhat-user-workloads/cluster-observabilit-tenant/cluster-observability-operator-1-0/troubleshooting-panel-console-plugin-0-3@sha256:bbc912fd48954a6c00d9d548051a877e59d792c00e232ac29078b23c524ab5a1"

COO_CONSOLE_MONITORING_PLUGIN_IMAGE_URL="quay.io/redhat-user-workloads/cluster-observabilit-tenant/cluster-observability-operator-1-0/monitoring-console-plugin-0-3@sha256:87eec7b028dca98f3dfe7316dd2097ebeae96c222da53527fdddca38fd0e68ff"

COO_KORREL8R_IMAGE_URL="quay.io/redhat-user-workloads/cluster-observabilit-tenant/cluster-observability-operator-1-0/korrel8r@sha256:8b38c9ca0d067d7398ff0a3389e7e5ea68c9e188c64982b233de93a548806e89"

# Add related images for disconnected installs
# First we add an empty list
yq -i '(.spec += {"relatedImages": []})' "$csv_file"
VALUE="${COO_IMAGE_URL}" yq -i '(.spec.relatedImages += [{"name":"cluster-observability-operator", "image": strenv(VALUE)}])' "$csv_file"
VALUE="${COO_CONF_RELOADER_IMAGE_URL}" yq -i '(.spec.relatedImages += [{"name":"prometheus-config-reloader", "image": strenv(VALUE)}])' "$csv_file"
VALUE="${COO_ALERTMANAGER_IMAGE_URL}" yq -i '(.spec.relatedImages += [{"name":"alertmanager", "image": strenv(VALUE)}])' "$csv_file"
VALUE="${COO_PROMETHEUS_IMAGE_URL}" yq -i '(.spec.relatedImages += [{"name":"prometheus", "image": strenv(VALUE)}])' "$csv_file"
VALUE="${COO_THANOS_IMAGE_URL}" yq -i '(.spec.relatedImages += [{"name":"thanos", "image": strenv(VALUE)}])' "$csv_file"
VALUE="${COO_ADMISSION_WEBHOOK_IMAGE_URL}" yq -i '(.spec.relatedImages += [{"name":"prometheus-operator-admission-webhook", "image": strenv(VALUE)}])' "$csv_file"
VALUE="${COO_PO_IMAGE_URL}" yq -i '(.spec.relatedImages += [{"name":"prometheus-operator", "image": strenv(VALUE)}])' "$csv_file"
VALUE="${COO_CONSOLE_DASHBOARDS_PLUGIN_IMAGE_URL}" yq -i '(.spec.relatedImages += [{"name":"ui-dashboards", "image": strenv(VALUE)}])' "$csv_file"
VALUE="${COO_CONSOLE_DISTRIBUTED_TRACING_PLUGIN_IMAGE_URL}" yq -i '(.spec.relatedImages += [{"name":"ui-tracing", "image": strenv(VALUE)}])' "$csv_file"
VALUE="${COO_CONSOLE_LOGGING_PLUGIN_IMAGE_URL}" yq -i '(.spec.relatedImages += [{"name":"ui-logging", "image": strenv(VALUE)}])' "$csv_file"
VALUE="${COO_CONSOLE_TROUBLESHOOTING_PANEL_PLUGIN_IMAGE_URL}" yq -i '(.spec.relatedImages += [{"name":"ui-troubleshooting", "image": strenv(VALUE)}])' "$csv_file"
VALUE="${COO_CONSOLE_MONITORING_PLUGIN_IMAGE_URL}" yq -i '(.spec.relatedImages += [{"name":"ui-monitoring", "image": strenv(VALUE)}])' "$csv_file"
VALUE="${COO_KORREL8R_IMAGE_URL}" yq -i '(.spec.relatedImages += [{"name":"korrel8r", "image": strenv(VALUE)}])' "$csv_file"

# Replace quay.io/rhobs image urls with registry-proxy.engineering.redhat.com/
# urls to get brew builds to pass
sed -i -e "s|quay.io/rhobs/observability-operator.*|${COO_IMAGE_URL}|g" "$csv_file"
sed -i -e "s|quay.io/rhobs/obo-prometheus-operator.*|${COO_PO_IMAGE_URL}|g" "$csv_file"
sed -i -e "s|quay.io/rhobs/obo-admission-webhook.*|${COO_ADMISSION_WEBHOOK_IMAGE_URL}|g" "$csv_file"

# Replace containerImage field with correct image
sed -i -e "s|containerImage:.*|containerImage: ${COO_IMAGE_URL}|g" "$csv_file"

# Replace annotation values used in the upstream bundle for those in the downstream product bundle
sed -i -e "s|operators.operatorframework.io.bundle.package.v1: observability-operator|operators.operatorframework.io.bundle.package.v1: cluster-observability-operator|g" "$annotation_file"

# Replace displayName value used in the upstream bundle so it matches the
# downstream product bundle name
sed -i -e "s|displayName: Observability Operator|displayName: Cluster Observability Operator|g" "$csv_file"
sed -i -e "s|Observability Operator is a Go|Cluster Observability Operator is a Go|g" "$csv_file"

# Replace suggest-namespace annotation if present
sed -i -r "s|operatorframework.io/suggested-namespace: observability-operator|operatorframework.io/suggested-namespace: openshift-cluster-observability-operator|" "$csv_file"

# Replace link value used in the upstream bundle with the downstream name
sed -i -e "s|name: Observability Operator|name: Cluster Observability Operator|g" "$csv_file"

# first add an empty env list to the obo operator container if it doesn't exist
# already
yq -i '(.spec.install.spec.deployments[] | select(.name == "observability-operator").spec.template.spec.containers[] | select(.name == "operator") | select(has("env") | not)) += {"env": []}' "$csv_file"

# add the various images we want to use via an env
# variable. This allows OSBS to massage the pullspec (registry replacement,
# sha pinning)
# We do that by first using sed to replace the relevant image spec with our new
# env var.
# Then we use yq to add the env var value to the containers environment.
sed -i -e 's|--prometheus-config-reloader=.*|"--prometheus-config-reloader=$(RELATED_IMAGE_PROMETHEUS_CONFIG_RELOADER)"|' "$csv_file"
VALUE="${COO_CONF_RELOADER_IMAGE_URL}" yq -i '(.spec.install.spec.deployments[] | select(.name == "obo-prometheus-operator").spec.template.spec.containers[] | select(.name == "prometheus-operator").env) += [{"name":"RELATED_IMAGE_PROMETHEUS_CONFIG_RELOADER", "value": strenv(VALUE)}]' "$csv_file"

sed -i -e 's|--images=alertmanager=.*|"--images=alertmanager=$(RELATED_IMAGE_ALERTMANAGER)"|' "$csv_file"
VALUE="${COO_ALERTMANAGER_IMAGE_URL}" yq -i '(.spec.install.spec.deployments[] | select(.name == "observability-operator").spec.template.spec.containers[] | select(.name == "operator").env) += [{"name":"RELATED_IMAGE_ALERTMANAGER", "value": strenv(VALUE)}]' "$csv_file"

sed -i -e 's|--images=prometheus=.*|"--images=prometheus=$(RELATED_IMAGE_PROMETHEUS)"|' "$csv_file"
VALUE="${COO_PROMETHEUS_IMAGE_URL}" yq -i '(.spec.install.spec.deployments[] | select(.name == "observability-operator").spec.template.spec.containers[] | select(.name == "operator").env) += [{"name":"RELATED_IMAGE_PROMETHEUS", "value": strenv(VALUE)}]' "$csv_file"

sed -i -e 's|--images=thanos=.*|"--images=thanos=$(RELATED_IMAGE_THANOS)"|' "$csv_file"
VALUE="${COO_THANOS_IMAGE_URL}" yq -i '(.spec.install.spec.deployments[] | select(.name == "observability-operator").spec.template.spec.containers[] | select(.name == "operator").env) += [{"name":"RELATED_IMAGE_THANOS", "value": strenv(VALUE)}]' "$csv_file"

# TODO Once COO-144 is fixed reenable the sed command below and delete lines 150, 153, 156, 159, 162
# sed -i -e 's|--images=ui-dashboards=.*|"--images=ui-dashboards=$(RELATED_IMAGE_CONSOLE_DASHBOARDS_PLUGIN)"|' "$csv_file"
yq -i '(.spec.install.spec.deployments[] | select(.name == "observability-operator").spec.template.spec.containers[] | select(.name == "operator").args) +=  ["--images=ui-dashboards=$(RELATED_IMAGE_CONSOLE_DASHBOARDS_PLUGIN)"]' "$csv_file"
VALUE="${COO_CONSOLE_DASHBOARDS_PLUGIN_IMAGE_URL}" yq -i '(.spec.install.spec.deployments[] | select(.name == "observability-operator").spec.template.spec.containers[] | select(.name == "operator").env) += [{"name":"RELATED_IMAGE_CONSOLE_DASHBOARDS_PLUGIN", "value": strenv(VALUE)}]' "$csv_file"

yq -i '(.spec.install.spec.deployments[] | select(.name == "observability-operator").spec.template.spec.containers[] | select(.name == "operator").args) +=  ["--images=ui-distributed-tracing=$(RELATED_IMAGE_CONSOLE_DISTRIBUTED_TRACING_PLUGIN)"]' "$csv_file"
VALUE="${COO_CONSOLE_DISTRIBUTED_TRACING_PLUGIN_IMAGE_URL}" yq -i '(.spec.install.spec.deployments[] | select(.name == "observability-operator").spec.template.spec.containers[] | select(.name == "operator").env) += [{"name":"RELATED_IMAGE_CONSOLE_DISTRIBUTED_TRACING_PLUGIN", "value": strenv(VALUE)}]' "$csv_file"

yq -i '(.spec.install.spec.deployments[] | select(.name == "observability-operator").spec.template.spec.containers[] | select(.name == "operator").args) +=  ["--images=ui-logging=$(RELATED_IMAGE_CONSOLE_LOGGING_PLUGIN)"]' "$csv_file"
VALUE="${COO_CONSOLE_LOGGING_PLUGIN_IMAGE_URL}" yq -i '(.spec.install.spec.deployments[] | select(.name == "observability-operator").spec.template.spec.containers[] | select(.name == "operator").env) += [{"name":"RELATED_IMAGE_CONSOLE_LOGGING_PLUGIN", "value": strenv(VALUE)}]' "$csv_file"

yq -i '(.spec.install.spec.deployments[] | select(.name == "observability-operator").spec.template.spec.containers[] | select(.name == "operator").args) +=  ["--images=ui-troubleshooting-panel=$(RELATED_IMAGE_CONSOLE_TROUBLESHOOTING_PANEL_PLUGIN)"]' "$csv_file"
VALUE="${COO_CONSOLE_TROUBLESHOOTING_PANEL_PLUGIN_IMAGE_URL}" yq -i '(.spec.install.spec.deployments[] | select(.name == "observability-operator").spec.template.spec.containers[] | select(.name == "operator").env) += [{"name":"RELATED_IMAGE_CONSOLE_TROUBLESHOOTING_PANEL_PLUGIN", "value": strenv(VALUE)}]' "$csv_file"

yq -i '(.spec.install.spec.deployments[] | select(.name == "observability-operator").spec.template.spec.containers[] | select(.name == "operator").args) +=  ["--images=ui-monitoring=$(RELATED_IMAGE_CONSOLE_MONITORING_PLUGIN)"]' "$csv_file"
VALUE="${COO_CONSOLE_MONITORING_PLUGIN_IMAGE_URL}" yq -i '(.spec.install.spec.deployments[] | select(.name == "observability-operator").spec.template.spec.containers[] | select(.name == "operator").env) += [{"name":"RELATED_IMAGE_CONSOLE_MONITORING_PLUGIN", "value": strenv(VALUE)}]' "$csv_file"

yq -i '(.spec.install.spec.deployments[] | select(.name == "observability-operator").spec.template.spec.containers[] | select(.name == "operator").args) +=  ["--images=korrel8r=$(RELATED_IMAGE_KORREL8R)"]' "$csv_file"
VALUE="${COO_KORREL8R_IMAGE_URL}" yq -i '(.spec.install.spec.deployments[] | select(.name == "observability-operator").spec.template.spec.containers[] | select(.name == "operator").env) += [{"name":"RELATED_IMAGE_KORREL8R", "value": strenv(VALUE)}]' "$csv_file"

# set openshift.enabled feature gate
yq -i '(.spec.install.spec.deployments[] | select(.name == "observability-operator").spec.template.spec.containers[] | select(.name == "operator").args) += ["--openshift.enabled=true"]' "$csv_file"

# Set CSV .spec.version to downstream version.
VALUE="${PRODUCT_VERSION}" yq -i '.spec.version = strenv(VALUE)' "${csv_file}"

# Add .olm.skipRange annotation
VALUE=">="${CI_X_VERSION}.${CI_Y_VERSION}.0" <${PRODUCT_VERSION}" yq -i '.metadata.annotations += {"olm.skipRange": strenv(VALUE)}' "${csv_file}"

# Set replaces based upon the version defined from the environment variable or
# calculate it to be the previous z-stream
python3 - << END
replaces = "${CSV_REPLACES_VERSION:-}"
if replaces == "":
  patch = int("${Z_VERSION}") - 1
  if patch > 0:
    replaces = "${X_VERSION}" + "." + "${Y_VERSION}" + "." + str(patch)
if replaces != "":
  import os, yaml
  with open('${csv_file}', 'r') as f:
    y = yaml.safe_load(f) or {}
    y['spec']['replaces'] = "cluster-observability-operator." + replaces
  with open('${csv_file}', 'w') as f:
    yaml.dump(y, f)
END

# Set CSV .metadata.name to downstream version.
VALUE="${PRODUCT_VERSION}" yq -i '.metadata.name = "cluster-observability-operator.v" + strenv(VALUE)' "${csv_file}"

# TODO jan temp workaround until we have obo bundle creation fixed
sed -i -e "s|image: observability-operator.*|image: ${COO_IMAGE_URL}|g" "$csv_file"
sed -i -e "s|containerImage: observability-operator.*|containerImage: ${COO_IMAGE_URL}|g" "$csv_file"
